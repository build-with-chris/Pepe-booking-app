import os
import sys
from logging.config import fileConfig
from pathlib import Path

from alembic import context
from sqlalchemy import engine_from_config, pool
import sqlalchemy as sa

# Projektwurzel ins Python-Pfad einf√ºgen, damit lokale Importe funktionieren
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

# Alembic-Konfiguration laden
config = context.config
if config.config_file_name:
    fileConfig(config.config_file_name)

# Datenbank-URL normalisieren (falls gesetzt), sonst Fallback auf SQLite
from config import normalize_db_url
raw_db_url = os.getenv('DATABASE_URL', '')
if raw_db_url:
    db_url = normalize_db_url(raw_db_url)
else:
    db_url = 'sqlite:///pepe.db'
config.set_main_option('sqlalchemy.url', db_url)

# Metadata aus den Modellen importieren
from models import db
target_metadata = db.metadata


def run_migrations_offline():
    url = config.get_main_option('sqlalchemy.url')
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix='',
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()